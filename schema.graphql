# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
  seller: Seller
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  createdAt: DateTimeNullableFilter
  seller: SellerWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  seller: SellerRelateToOneForUpdateInput
}

input SellerRelateToOneForUpdateInput {
  create: SellerCreateInput
  connect: SellerWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  seller: SellerRelateToOneForCreateInput
}

input SellerRelateToOneForCreateInput {
  create: SellerCreateInput
  connect: SellerWhereUniqueInput
}

type Category {
  id: ID!
  name: String
  subcategories(where: SubcategoryWhereInput! = {}, orderBy: [SubcategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubcategoryWhereUniqueInput): [Subcategory!]
  subcategoriesCount(where: SubcategoryWhereInput! = {}): Int
  ads(where: AdWhereInput! = {}, orderBy: [AdOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdWhereUniqueInput): [Ad!]
  adsCount(where: AdWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  subcategories: SubcategoryManyRelationFilter
  ads: AdManyRelationFilter
}

input SubcategoryManyRelationFilter {
  every: SubcategoryWhereInput
  some: SubcategoryWhereInput
  none: SubcategoryWhereInput
}

input AdManyRelationFilter {
  every: AdWhereInput
  some: AdWhereInput
  none: AdWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CategoryUpdateInput {
  name: String
  subcategories: SubcategoryRelateToManyForUpdateInput
  ads: AdRelateToManyForUpdateInput
}

input SubcategoryRelateToManyForUpdateInput {
  disconnect: [SubcategoryWhereUniqueInput!]
  set: [SubcategoryWhereUniqueInput!]
  create: [SubcategoryCreateInput!]
  connect: [SubcategoryWhereUniqueInput!]
}

input AdRelateToManyForUpdateInput {
  disconnect: [AdWhereUniqueInput!]
  set: [AdWhereUniqueInput!]
  create: [AdCreateInput!]
  connect: [AdWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  subcategories: SubcategoryRelateToManyForCreateInput
  ads: AdRelateToManyForCreateInput
}

input SubcategoryRelateToManyForCreateInput {
  create: [SubcategoryCreateInput!]
  connect: [SubcategoryWhereUniqueInput!]
}

input AdRelateToManyForCreateInput {
  create: [AdCreateInput!]
  connect: [AdWhereUniqueInput!]
}

type Subcategory {
  id: ID!
  name: String
  category: Category
  ads(where: AdWhereInput! = {}, orderBy: [AdOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdWhereUniqueInput): [Ad!]
  adsCount(where: AdWhereInput! = {}): Int
}

input SubcategoryWhereUniqueInput {
  id: ID
}

input SubcategoryWhereInput {
  AND: [SubcategoryWhereInput!]
  OR: [SubcategoryWhereInput!]
  NOT: [SubcategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  category: CategoryWhereInput
  ads: AdManyRelationFilter
}

input SubcategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input SubcategoryUpdateInput {
  name: String
  category: CategoryRelateToOneForUpdateInput
  ads: AdRelateToManyForUpdateInput
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input SubcategoryUpdateArgs {
  where: SubcategoryWhereUniqueInput!
  data: SubcategoryUpdateInput!
}

input SubcategoryCreateInput {
  name: String
  category: CategoryRelateToOneForCreateInput
  ads: AdRelateToManyForCreateInput
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

type Ad {
  id: ID!
  createdAt: DateTime
  title: String
  description: String
  price: String
  coverImg: ImageFieldOutput
  views: Int
  extraData: JSON
  address: String
  seller: Seller
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  category: Category
  subcategory: Subcategory
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input AdWhereUniqueInput {
  id: ID
}

input AdWhereInput {
  AND: [AdWhereInput!]
  OR: [AdWhereInput!]
  NOT: [AdWhereInput!]
  id: IDFilter
  createdAt: DateTimeNullableFilter
  title: StringFilter
  description: StringFilter
  price: StringFilter
  views: IntNullableFilter
  address: StringFilter
  seller: SellerWhereInput
  images: ImageManyRelationFilter
  category: CategoryWhereInput
  subcategory: SubcategoryWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ImageManyRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input AdOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  title: OrderDirection
  description: OrderDirection
  price: OrderDirection
  views: OrderDirection
  address: OrderDirection
}

input AdUpdateInput {
  createdAt: DateTime
  title: String
  description: String
  price: String
  coverImg: ImageFieldInput
  views: Int
  extraData: JSON
  address: String
  seller: SellerRelateToOneForUpdateInput
  images: ImageRelateToManyForUpdateInput
  category: CategoryRelateToOneForUpdateInput
  subcategory: SubcategoryRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ImageRelateToManyForUpdateInput {
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input SubcategoryRelateToOneForUpdateInput {
  create: SubcategoryCreateInput
  connect: SubcategoryWhereUniqueInput
  disconnect: Boolean
}

input AdUpdateArgs {
  where: AdWhereUniqueInput!
  data: AdUpdateInput!
}

input AdCreateInput {
  createdAt: DateTime
  title: String
  description: String
  price: String
  coverImg: ImageFieldInput
  views: Int
  extraData: JSON
  address: String
  seller: SellerRelateToOneForCreateInput
  images: ImageRelateToManyForCreateInput
  category: CategoryRelateToOneForCreateInput
  subcategory: SubcategoryRelateToOneForCreateInput
}

input ImageRelateToManyForCreateInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input SubcategoryRelateToOneForCreateInput {
  create: SubcategoryCreateInput
  connect: SubcategoryWhereUniqueInput
}

type Seller {
  id: ID!
  firstName: String
  lastName: String
  avatar: ImageFieldOutput
  phoneNumber: String
  ratings: JSON
  user: User
  ads(where: AdWhereInput! = {}, orderBy: [AdOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdWhereUniqueInput): [Ad!]
  adsCount(where: AdWhereInput! = {}): Int
}

input SellerWhereUniqueInput {
  id: ID
}

input SellerWhereInput {
  AND: [SellerWhereInput!]
  OR: [SellerWhereInput!]
  NOT: [SellerWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  phoneNumber: StringFilter
  user: UserWhereInput
  ads: AdManyRelationFilter
}

input SellerOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  phoneNumber: OrderDirection
}

input SellerUpdateInput {
  firstName: String
  lastName: String
  avatar: ImageFieldInput
  phoneNumber: String
  ratings: JSON
  user: UserRelateToOneForUpdateInput
  ads: AdRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input SellerUpdateArgs {
  where: SellerWhereUniqueInput!
  data: SellerUpdateInput!
}

input SellerCreateInput {
  firstName: String
  lastName: String
  avatar: ImageFieldInput
  phoneNumber: String
  ratings: JSON
  user: UserRelateToOneForCreateInput
  ads: AdRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Image {
  id: ID!
  file: ImageFieldOutput
  ad: Ad
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  ad: AdWhereInput
}

input ImageOrderByInput {
  id: OrderDirection
}

input ImageUpdateInput {
  file: ImageFieldInput
  ad: AdRelateToOneForUpdateInput
}

input AdRelateToOneForUpdateInput {
  create: AdCreateInput
  connect: AdWhereUniqueInput
  disconnect: Boolean
}

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  file: ImageFieldInput
  ad: AdRelateToOneForCreateInput
}

input AdRelateToOneForCreateInput {
  create: AdCreateInput
  connect: AdWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createSubcategory(data: SubcategoryCreateInput!): Subcategory
  createSubcategories(data: [SubcategoryCreateInput!]!): [Subcategory]
  updateSubcategory(where: SubcategoryWhereUniqueInput!, data: SubcategoryUpdateInput!): Subcategory
  updateSubcategories(data: [SubcategoryUpdateArgs!]!): [Subcategory]
  deleteSubcategory(where: SubcategoryWhereUniqueInput!): Subcategory
  deleteSubcategories(where: [SubcategoryWhereUniqueInput!]!): [Subcategory]
  createAd(data: AdCreateInput!): Ad
  createAds(data: [AdCreateInput!]!): [Ad]
  updateAd(where: AdWhereUniqueInput!, data: AdUpdateInput!): Ad
  updateAds(data: [AdUpdateArgs!]!): [Ad]
  deleteAd(where: AdWhereUniqueInput!): Ad
  deleteAds(where: [AdWhereUniqueInput!]!): [Ad]
  createSeller(data: SellerCreateInput!): Seller
  createSellers(data: [SellerCreateInput!]!): [Seller]
  updateSeller(where: SellerWhereUniqueInput!, data: SellerUpdateInput!): Seller
  updateSellers(data: [SellerUpdateArgs!]!): [Seller]
  deleteSeller(where: SellerWhereUniqueInput!): Seller
  deleteSellers(where: [SellerWhereUniqueInput!]!): [Seller]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  subcategories(where: SubcategoryWhereInput! = {}, orderBy: [SubcategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubcategoryWhereUniqueInput): [Subcategory!]
  subcategory(where: SubcategoryWhereUniqueInput!): Subcategory
  subcategoriesCount(where: SubcategoryWhereInput! = {}): Int
  ads(where: AdWhereInput! = {}, orderBy: [AdOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdWhereUniqueInput): [Ad!]
  ad(where: AdWhereUniqueInput!): Ad
  adsCount(where: AdWhereInput! = {}): Int
  sellers(where: SellerWhereInput! = {}, orderBy: [SellerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SellerWhereUniqueInput): [Seller!]
  seller(where: SellerWhereUniqueInput!): Seller
  sellersCount(where: SellerWhereInput! = {}): Int
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
